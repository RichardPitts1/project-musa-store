{"version":3,"file":"static/webpack/static/development/pages/_app.js.231565202c1a74e3d220.hot-update.js","sources":["webpack:///./components/TakeMyMoney.js"],"sourcesContent":["import React from 'react';\nimport Router from 'next/router';\nimport NProgress from 'nprogress';\nimport PropTypes from 'prop-types';\nimport gql from 'graphql-tag';\nimport calcTotalPrice from '../lib/calcTotalPrice';\nimport Error from './ErrorMessage';\nimport StripeCheckout from 'react-stripe-checkout';\nimport { Mutation } from 'react-apollo';\nimport User, { CURRENT_USER_QUERY } from './User';\n\n// So StripeCheckout takes a ton of parameters...look up the documentation to see the whole list.\n//   Options include things like currency, amount, token, desription, and even bitcoin 🤔\n//   Obviously, you want to interpolate things like the amount into these arguments 👍\n\n// Likewise, we get an awful error it item doesn't exist, so you check with me.cart[0].item && 👍\n\n// So the way it works:\n//   You create a token with the CC info that is sent to Stripe who then send your token to the server\n\n// Generating the token is crucial to the process.  Once you get the token, you then pass that MO to the server 👍\n\n// Passing the createOrder function as a secondary argument to token is a 🔑 step in this whole process.  Scoping\n\nfunction totalItems(cart) {\n  return cart.reduce((tally, cartItem) => tally + cartItem.quantity, 0);\n}\n\nconst CREATE_ORDER_MUTATION = gql` \nmutation createOrder($token: String!) {\n  createOrder(token: $token) {\n    id\n    charge\n    totalItems\n    items {\n      id\n      title\n    }\n  }\n}\n\n`\n\nclass TakeMyMoney extends React.Component {\n  onToken = (res, createOrder) => {\n    console.log('On Token Called!');\n    console.log('this is the res:');\n    console.log(res);\n    // manually call the mutation once we have the stripe token.  \n    createOrder({\n      variables: {\n        token: res.id\n      }\n    }).catch(err => {\n      alert(err.message);\n    });\n  };\n  render() {\n    return (\n    <User>\n    {({ data: { me } }) => (\n    <Mutation mutation={CREATE_ORDER_MUTATION}\n    refetchQueries={[{ query: CURRENT_USER_QUERY}\n    ]}>\n    {(createOrder) => (\n    <StripeCheckout\n      name=\"Project Musa\"\n      amount={calcTotalPrice(me.cart[0].item && me.cart)}\n      description={`${totalItems(me.cart)} products ordered!`}\n      // Be careful, this produces an awful bug if you dont do the preceding && logic :\n      image={me.cart[0].item && me.cart[0].item.image}\n      stripeKey=\"pk_test_2vx7bJ9C6SY3O8LUWtaydvWx00ZoPPIAgd\"\n      currency=\"USD\"\n      email={me.email}\n      token={res => this.onToken(res, \n        createOrder)}\n      >\n                {this.props.children}       \n              </StripeCheckout>\n            )}\n          </Mutation>\n          )}\n      </User>\n    );\n  }\n}\n\nexport default TakeMyMoney;\n\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAcA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AACA;AACA;;;;;;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAAA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAJA;AAwBA;;;;AAzCA;AACA;AA2CA;;;;A","sourceRoot":""}